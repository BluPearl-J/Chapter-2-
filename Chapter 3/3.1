(Validating User Input) Modify the script of Fig. 3.3 to validate its inputs. For any
input, if the value entered is other than 1 or 2, keep looping until the user enters a correct
In [1]: import statistics
In [2]: values = [47, 95, 88, 73, 88, 84]
In [3]: statistics.mean(values)
Out[3]: 79.16666666666667
In [4]: statistics.median(values)
Out[4]: 86.0
In [5]: statistics.mode(values)
Out[5]: 88
112 Control Statements and Program Development
value. Use one counter to keep track of the number of passes, then calculate the number
of failures after all the user’s inputs have been received.


Script 3.3 

plementing the Algorithm
The following script implements the algorithm and is followed by two sample executions.
Once again, notice that the Python code closely resembles the pseudocode. Lines 9–16
loop 10 times, inputting and processing one exam result each time. The if…else statement (lines 13–16) that processes each result is nested in the for statement—that is, it’s
part of the for statement’s suite. If the result is 1, we add 1 to passes; otherwise, we
assume the result is 2 and add 1 to failures. After inputting 10 values, the loop terminates and lines 19 and 20 display passes and failures. Lines 22–23 determine whether
more than eight students passed the exam and, if so, display 'Bonus to instructor'.
Initialize passes to zero
Initialize failures to zero
For each of the ten students
Input the next exam result
If the student passed
Add one to passes
Else
Add one to failures
Display the number of passes
Display the number of failures
If more than eight students passed 
Display “Bonus to instructor”
1 # fig03_03.py
2 """Using nested control statements to analyze examination results."""
3
4 # initialize variables
5 passes = 0 # number of passes
6 failures = 0 # number of failures
7
8 # process 10 students
9 for student in range(10):
10 # get one exam result
11 result = int(input('Enter result (1=pass, 2=fail): '))
12
13 if result == 1:
14 passes = passes + 1
15 else:
16 failures = failures + 1
17
Fig. 3.3 | Analysis of examination results. (Part 1 of 2.)
100 Control Statements and Program Development
Self Check
1 (IPython Session) Use a for statement to input two integers. Use a nested if…else
statement to display whether each value is even or odd. Enter 10 and 7 to test your code.
Answer:
18 # termination phase
19 print('Passed:', passes)
20 print('Failed:', failures)
21
22 if passes > 8:
23 print('Bonus to instructor')
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 2
Enter result (1=pass, 2=fail): 2
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 2
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 2
Passed: 6
Failed: 4
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 2
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 1
Enter result (1=pass, 2=fail): 1
Passed: 9
Failed: 1
Bonus to instructor
In [1]: for count in range(2):
 ...: value = int(input('Enter an integer: '))
 ...: if value % 2 == 0:
 ...: print(f'{value} is even')
 ...: else:
 ...: print(f'{value} is odd')
 ...: 
Enter an integer: 10
10 is even
Enter an integer: 7
7 is odd
Fig. 3.3 | Analysis of examination result
